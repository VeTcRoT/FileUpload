@page "/"
@using FilesUpload.Models
@using FilesUpload.Services;
@using System.ComponentModel.DataAnnotations;

@inject IBlobService blobService

<h3>Upload .docx File</h3>

<EditForm Model="@uploadModel" OnValidSubmit="UploadFile" class="file-upload-form">
    <DataAnnotationsValidator />
    
    @if (fileValidationMessages.Count > 0)
    {
        foreach (string errorMessage in fileValidationMessages)
        {
            <div class="validation-message">@errorMessage</div>
        }
    }
    else
    {
        <ValidationMessage For="() => uploadModel.File" />
    }
    <InputFile type="file" class="form-control" accept=".docx" OnChange="HandleFileSelected" @key="inputFileId" />
    
    <ValidationMessage For="() => uploadModel.Email" />
    <InputText id="email" @bind-Value="uploadModel.Email" placeholder="Email" class="form-control" />

    <button type="submit" class="btn btn-primary">Upload</button>
</EditForm>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert-success" style="margin-top: 20px;">@message</div>
}

@code
{
    UploadModel uploadModel = new();
    string message = string.Empty;
    string inputFileId = Guid.NewGuid().ToString();
    List<string> fileValidationMessages = new();

    void HandleFileSelected(InputFileChangeEventArgs eventArgs)
    {
        var tempModel = new UploadModel { File = eventArgs.File, Email = "test@localhost" };

        var validationResults = new List<ValidationResult>();
        if (!Validator.TryValidateObject(tempModel, new ValidationContext(tempModel), validationResults, true))
        {
            if (validationResults.Count > 0)
            {
                fileValidationMessages = validationResults.Select(v => v.ErrorMessage).ToList();
                uploadModel.File = null!;
            }
        }
        else
        {
            fileValidationMessages = new();
            uploadModel.File = eventArgs.File;
        }

        StateHasChanged();
    }

    async Task UploadFile()
    {
        //var blobName = await blobService.UploadFileAsync(uploadModel);
        message = $"{uploadModel.File.Name} was saved to Azure Blob Storage. Check your email to get link to your file. File URL will be valid for 1 hour.";

        inputFileId = Guid.NewGuid().ToString();
        uploadModel = new();
        StateHasChanged();
    }
}